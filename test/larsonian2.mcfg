S --> Cm   [0,0;0,1;0,2]	(* $ --> c   [0,0;0,1;0,2] *)
AE --> Cs   AE   [0,0;0,1;0,2;1,0][1,1][1,2]	(* A --> deg   A   [0,0;0,1;0,2;1,0][1,1][1,2] *)
AF --> Dy   Cj   [0,0][0,1][0,2;1,0;1,1;1,2][1,3]	(* Be;-case --> /a,Be   a;-case   [0,0][0,1][0,2;1,0;1,1;1,2][1,3] *)
AF --> Ed   DN   [0,0][0,1][0,2;1,0;1,1;1,2][1,3]	(* Be;-case --> /ving,Be   ving;-case   [0,0][0,1][0,2;1,0;1,1;1,2][1,3] *)
AG --> Dy   Aa   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4]	(* Be;-case;-f --> /a,Be   a;-case;-f   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4] *)
AG --> Ed   Al   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4]	(* Be;-case;-f --> /ving,Be   ving;-case;-f   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4] *)
AH --> Dy   r   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4][1,5]	(* Be;-case;-f;-wh_rel --> /a,Be   a;-case;-f;-wh_rel   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4][1,5] *)
AH --> Ed   y   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4][1,5]	(* Be;-case;-f;-wh_rel --> /ving,Be   ving;-case;-f;-wh_rel   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4][1,5] *)
AI --> Dy   Ab   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4]	(* Be;-case;-wh_rel --> /a,Be   a;-case;-wh_rel   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4] *)
AI --> Ed   Am   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4]	(* Be;-case;-wh_rel --> /ving,Be   ving;-case;-wh_rel   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4] *)
AJ --> Dy   s   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4][1,5]	(* Be;-case;-wh_rel;-f --> /a,Be   a;-case;-wh_rel;-f   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4][1,5] *)
AJ --> Ed   z   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4][1,5]	(* Be;-case;-wh_rel;-f --> /ving,Be   ving;-case;-wh_rel;-f   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4][1,5] *)
AK --> Dy   Ck   [0,0][0,1][0,2;1,0;1,1;1,2][1,3]	(* Be;-case,-wh_rel --> /a,Be   a;-case,-wh_rel   [0,0][0,1][0,2;1,0;1,1;1,2][1,3] *)
AK --> Ed   DO   [0,0][0,1][0,2;1,0;1,1;1,2][1,3]	(* Be;-case,-wh_rel --> /ving,Be   ving;-case,-wh_rel   [0,0][0,1][0,2;1,0;1,1;1,2][1,3] *)
AL --> Dy   Cl   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4]	(* Be;-case,-wh_rel;-f --> /a,Be   a;-case,-wh_rel;-f   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4] *)
AL --> Ed   DP   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4]	(* Be;-case,-wh_rel;-f --> /ving,Be   ving;-case,-wh_rel;-f   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4] *)
CO --> Ee   DN   [0,0][0,1][0,2;1,0;1,1;1,2][1,3]	(* Been;-case --> /ving,Been   ving;-case   [0,0][0,1][0,2;1,0;1,1;1,2][1,3] *)
CP --> Ee   Al   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4]	(* Been;-case;-f --> /ving,Been   ving;-case;-f   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4] *)
CQ --> Ee   y   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4][1,5]	(* Been;-case;-f;-wh_rel --> /ving,Been   ving;-case;-f;-wh_rel   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4][1,5] *)
CR --> Ee   Am   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4]	(* Been;-case;-wh_rel --> /ving,Been   ving;-case;-wh_rel   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4] *)
CT --> Ee   z   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4][1,5]	(* Been;-case;-wh_rel;-f --> /ving,Been   ving;-case;-wh_rel;-f   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4][1,5] *)
CU --> Ee   DO   [0,0][0,1][0,2;1,0;1,1;1,2][1,3]	(* Been;-case,-wh_rel --> /ving,Been   ving;-case,-wh_rel   [0,0][0,1][0,2;1,0;1,1;1,2][1,3] *)
CV --> Ee   DP   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4]	(* Been;-case,-wh_rel;-f --> /ving,Been   ving;-case,-wh_rel;-f   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4] *)
CW --> EZ   DG   [0,0][0,1][0,2;1,0;1,1;1,2]	(* Ce --> /t,Ce   t   [0,0][0,1][0,2;1,0;1,1;1,2] *)
CX --> EZ   DH   [0,0][0,1][0,2;1,0;1,1;1,2][1,3]	(* Ce;-f --> /t,Ce   t;-f   [0,0][0,1][0,2;1,0;1,1;1,2][1,3] *)
CY --> EZ   DI   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4]	(* Ce;-f;-wh_rel --> /t,Ce   t;-f;-wh_rel   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4] *)
CZ --> EZ   Ah   [0,0][0,1][0,2;1,0;1,1;1,2][1,3]	(* Ce;-wh_rel --> /t,Ce   t;-wh_rel   [0,0][0,1][0,2;1,0;1,1;1,2][1,3] *)
Ca --> EZ   Ai   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4]	(* Ce;-wh_rel;-f --> /t,Ce   t;-wh_rel;-f   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4] *)
AM --> Dr   CO   [0,0][0,1][0,2;1,0;1,1;1,2][1,3]	(* Have;-case --> /Been,Have   Been;-case   [0,0][0,1][0,2;1,0;1,1;1,2][1,3] *)
AM --> Ec   DK   [0,0][0,1][0,2;1,0;1,1;1,2][1,3]	(* Have;-case --> /ven,Have   ven;-case   [0,0][0,1][0,2;1,0;1,1;1,2][1,3] *)
AN --> Dr   CP   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4]	(* Have;-case;-f --> /Been,Have   Been;-case;-f   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4] *)
AN --> Ec   Aj   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4]	(* Have;-case;-f --> /ven,Have   ven;-case;-f   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4] *)
AO --> Dr   CQ   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4][1,5]	(* Have;-case;-f;-wh_rel --> /Been,Have   Been;-case;-f;-wh_rel   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4][1,5] *)
AO --> Ec   w   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4][1,5]	(* Have;-case;-f;-wh_rel --> /ven,Have   ven;-case;-f;-wh_rel   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4][1,5] *)
AP --> Dr   CR   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4]	(* Have;-case;-wh_rel --> /Been,Have   Been;-case;-wh_rel   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4] *)
AP --> Ec   Ak   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4]	(* Have;-case;-wh_rel --> /ven,Have   ven;-case;-wh_rel   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4] *)
AQ --> Dr   CT   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4][1,5]	(* Have;-case;-wh_rel;-f --> /Been,Have   Been;-case;-wh_rel;-f   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4][1,5] *)
AQ --> Ec   x   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4][1,5]	(* Have;-case;-wh_rel;-f --> /ven,Have   ven;-case;-wh_rel;-f   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4][1,5] *)
AR --> Dr   CU   [0,0][0,1][0,2;1,0;1,1;1,2][1,3]	(* Have;-case,-wh_rel --> /Been,Have   Been;-case,-wh_rel   [0,0][0,1][0,2;1,0;1,1;1,2][1,3] *)
AR --> Ec   DL   [0,0][0,1][0,2;1,0;1,1;1,2][1,3]	(* Have;-case,-wh_rel --> /ven,Have   ven;-case,-wh_rel   [0,0][0,1][0,2;1,0;1,1;1,2][1,3] *)
AT --> Dr   CV   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4]	(* Have;-case,-wh_rel;-f --> /Been,Have   Been;-case,-wh_rel;-f   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4] *)
AT --> Ec   DM   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4]	(* Have;-case,-wh_rel;-f --> /ven,Have   ven;-case,-wh_rel;-f   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4] *)
j --> Dq   AF   [0,0][0,1][0,2;1,0;1,1;1,2][1,3]	(* Modal;-case --> /Be,Modal   Be;-case   [0,0][0,1][0,2;1,0;1,1;1,2][1,3] *)
j --> Du   AM   [0,0][0,1][0,2;1,0;1,1;1,2][1,3]	(* Modal;-case --> /Have,Modal   Have;-case   [0,0][0,1][0,2;1,0;1,1;1,2][1,3] *)
j --> EU   Ct   [0,0][0,1][0,2;1,0;1,1;1,2][1,3]	(* Modal;-case --> /little_v,Modal   little_v;-case   [0,0][0,1][0,2;1,0;1,1;1,2][1,3] *)
k --> Dq   AG   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4]	(* Modal;-case;-f --> /Be,Modal   Be;-case;-f   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4] *)
k --> Du   AN   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4]	(* Modal;-case;-f --> /Have,Modal   Have;-case;-f   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4] *)
k --> EU   Ae   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4]	(* Modal;-case;-f --> /little_v,Modal   little_v;-case;-f   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4] *)
l --> Dq   AH   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4][1,5]	(* Modal;-case;-f;-wh_rel --> /Be,Modal   Be;-case;-f;-wh_rel   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4][1,5] *)
l --> Du   AO   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4][1,5]	(* Modal;-case;-f;-wh_rel --> /Have,Modal   Have;-case;-f;-wh_rel   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4][1,5] *)
l --> EU   u   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4][1,5]	(* Modal;-case;-f;-wh_rel --> /little_v,Modal   little_v;-case;-f;-wh_rel   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4][1,5] *)
m --> Dq   AI   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4]	(* Modal;-case;-wh_rel --> /Be,Modal   Be;-case;-wh_rel   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4] *)
m --> Du   AP   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4]	(* Modal;-case;-wh_rel --> /Have,Modal   Have;-case;-wh_rel   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4] *)
m --> EU   Af   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4]	(* Modal;-case;-wh_rel --> /little_v,Modal   little_v;-case;-wh_rel   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4] *)
n --> Dq   AJ   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4][1,5]	(* Modal;-case;-wh_rel;-f --> /Be,Modal   Be;-case;-wh_rel;-f   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4][1,5] *)
n --> Du   AQ   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4][1,5]	(* Modal;-case;-wh_rel;-f --> /Have,Modal   Have;-case;-wh_rel;-f   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4][1,5] *)
n --> EU   v   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4][1,5]	(* Modal;-case;-wh_rel;-f --> /little_v,Modal   little_v;-case;-wh_rel;-f   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4][1,5] *)
o --> Dq   AK   [0,0][0,1][0,2;1,0;1,1;1,2][1,3]	(* Modal;-case,-wh_rel --> /Be,Modal   Be;-case,-wh_rel   [0,0][0,1][0,2;1,0;1,1;1,2][1,3] *)
o --> Du   AR   [0,0][0,1][0,2;1,0;1,1;1,2][1,3]	(* Modal;-case,-wh_rel --> /Have,Modal   Have;-case,-wh_rel   [0,0][0,1][0,2;1,0;1,1;1,2][1,3] *)
o --> EU   Cu   [0,0][0,1][0,2;1,0;1,1;1,2][1,3]	(* Modal;-case,-wh_rel --> /little_v,Modal   little_v;-case,-wh_rel   [0,0][0,1][0,2;1,0;1,1;1,2][1,3] *)
p --> Dq   AL   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4]	(* Modal;-case,-wh_rel;-f --> /Be,Modal   Be;-case,-wh_rel;-f   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4] *)
p --> Du   AT   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4]	(* Modal;-case,-wh_rel;-f --> /Have,Modal   Have;-case,-wh_rel;-f   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4] *)
p --> EU   Cv   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4]	(* Modal;-case,-wh_rel;-f --> /little_v,Modal   little_v;-case,-wh_rel;-f   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4] *)
AU --> EW   W   [0,0][0,1][0,2;1,0;1,1;1,2]	(* Num --> /n,Num   n   [0,0][0,1][0,2;1,0;1,1;1,2] *)
AU --> Ef   W   [0,0][0,2][1,0;1,1;0,1;1,2]	(* Num --> n==>,Num   n   [0,0][0,2][1,0;1,1;0,1;1,2] *)
q --> EW   X   [0,0][0,1][0,2;1,0;1,1;1,2][1,3]	(* Num;-f --> /n,Num   n;-f   [0,0][0,1][0,2;1,0;1,1;1,2][1,3] *)
q --> EW   Ag   [0,0][0,1][0,2][1,0;1,1;1,2]	(* Num;-f --> /n,Num   n,-f   [0,0][0,1][0,2][1,0;1,1;1,2] *)
q --> Ef   X   [0,0][0,2][1,0;1,1;0,1;1,2][1,3]	(* Num;-f --> n==>,Num   n;-f   [0,0][0,2][1,0;1,1;0,1;1,2][1,3] *)
AV --> EW   I   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4]	(* Num;-f;-wh_rel --> /n,Num   n;-f;-wh_rel   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4] *)
AV --> Ef   I   [0,0][0,2][1,0;1,1;0,1;1,2][1,3][1,4]	(* Num;-f;-wh_rel --> n==>,Num   n;-f;-wh_rel   [0,0][0,2][1,0;1,1;0,1;1,2][1,3][1,4] *)
AW --> EW   Y   [0,0][0,1][0,2;1,0;1,1;1,2][1,3]	(* Num;-wh_rel --> /n,Num   n;-wh_rel   [0,0][0,1][0,2;1,0;1,1;1,2][1,3] *)
AW --> Ef   Y   [0,0][0,2][1,0;1,1;0,1;1,2][1,3]	(* Num;-wh_rel --> n==>,Num   n;-wh_rel   [0,0][0,2][1,0;1,1;0,1;1,2][1,3] *)
AX --> EW   J   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4]	(* Num;-wh_rel;-f --> /n,Num   n;-wh_rel;-f   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4] *)
AX --> Ef   J   [0,0][0,2][1,0;1,1;0,1;1,2][1,3][1,4]	(* Num;-wh_rel;-f --> n==>,Num   n;-wh_rel;-f   [0,0][0,2][1,0;1,1;0,1;1,2][1,3][1,4] *)
Cb --> DQ   [0,3;0,0][0,1][0,2]	(* Pfor --> +case,Pfor;-case   [0,3;0,0][0,1][0,2] *)
Cc --> DR   [0,3;0,0][0,1][0,2][0,4]	(* Pfor;-f --> +case,Pfor;-case;-f   [0,3;0,0][0,1][0,2][0,4] *)
Cd --> DT   [0,3;0,0][0,1][0,2][0,4][0,5]	(* Pfor;-f;-wh_rel --> +case,Pfor;-case;-f;-wh_rel   [0,3;0,0][0,1][0,2][0,4][0,5] *)
AY --> DU   [0,3;0,0][0,1][0,2][0,4]	(* Pfor;-wh_rel --> +case,Pfor;-case;-wh_rel   [0,3;0,0][0,1][0,2][0,4] *)
AY --> DW   [0,0][0,1][0,2][0,3]	(* Pfor;-wh_rel --> +case,Pfor;-case,-wh_rel   [0,0][0,1][0,2][0,3] *)
Ce --> DV   [0,3;0,0][0,1][0,2][0,4][0,5]	(* Pfor;-wh_rel;-f --> +case,Pfor;-case;-wh_rel;-f   [0,3;0,0][0,1][0,2][0,4][0,5] *)
Cf --> DX   [0,3;0,0][0,1][0,2]	(* Pto --> +case,Pto;-case   [0,3;0,0][0,1][0,2] *)
Cg --> DY   [0,3;0,0][0,1][0,2][0,4]	(* Pto;-f --> +case,Pto;-case;-f   [0,3;0,0][0,1][0,2][0,4] *)
Ch --> DZ   [0,3;0,0][0,1][0,2][0,4][0,5]	(* Pto;-f;-wh_rel --> +case,Pto;-case;-f;-wh_rel   [0,3;0,0][0,1][0,2][0,4][0,5] *)
AZ --> Da   [0,3;0,0][0,1][0,2][0,4]	(* Pto;-wh_rel --> +case,Pto;-case;-wh_rel   [0,3;0,0][0,1][0,2][0,4] *)
AZ --> Dc   [0,0][0,1][0,2][0,3]	(* Pto;-wh_rel --> +case,Pto;-case,-wh_rel   [0,0][0,1][0,2][0,3] *)
Ci --> Db   [0,3;0,0][0,1][0,2][0,4][0,5]	(* Pto;-wh_rel;-f --> +case,Pto;-case;-wh_rel;-f   [0,3;0,0][0,1][0,2][0,4][0,5] *)
Cj --> Ap   t   [0,0][0,1][0,2][1,0;1,1;1,2]	(* a;-case --> \d,a   d,-case   [0,0][0,1][0,2][1,0;1,1;1,2] *)
Aa --> Ap   Ad   [0,0][0,1][0,2][1,0;1,1;1,2][1,3]	(* a;-case;-f --> \d,a   d,-case;-f   [0,0][0,1][0,2][1,0;1,1;1,2][1,3] *)
Aa --> Eu   t   [0,0][0,1][0,2][1,0;1,1;1,2][0,3]	(* a;-case;-f --> \d,a;-f   d,-case   [0,0][0,1][0,2][1,0;1,1;1,2][0,3] *)
r --> Ap   Co   [0,0][0,1][0,2][1,0;1,1;1,2][1,3][1,4]	(* a;-case;-f;-wh_rel --> \d,a   d,-case;-f;-wh_rel   [0,0][0,1][0,2][1,0;1,1;1,2][1,3][1,4] *)
r --> Eu   Cp   [0,0][0,1][0,2][1,0;1,1;1,2][0,3][1,3]	(* a;-case;-f;-wh_rel --> \d,a;-f   d,-case;-wh_rel   [0,0][0,1][0,2][1,0;1,1;1,2][0,3][1,3] *)
r --> Ev   t   [0,0][0,1][0,2][1,0;1,1;1,2][0,3][0,4]	(* a;-case;-f;-wh_rel --> \d,a;-f;-wh_rel   d,-case   [0,0][0,1][0,2][1,0;1,1;1,2][0,3][0,4] *)
Ab --> Ap   Cp   [0,0][0,1][0,2][1,0;1,1;1,2][1,3]	(* a;-case;-wh_rel --> \d,a   d,-case;-wh_rel   [0,0][0,1][0,2][1,0;1,1;1,2][1,3] *)
Ab --> Aq   t   [0,0][0,1][0,2][1,0;1,1;1,2][0,3]	(* a;-case;-wh_rel --> \d,a;-wh_rel   d,-case   [0,0][0,1][0,2][1,0;1,1;1,2][0,3] *)
s --> Ap   Cq   [0,0][0,1][0,2][1,0;1,1;1,2][1,3][1,4]	(* a;-case;-wh_rel;-f --> \d,a   d,-case;-wh_rel;-f   [0,0][0,1][0,2][1,0;1,1;1,2][1,3][1,4] *)
s --> Aq   Ad   [0,0][0,1][0,2][1,0;1,1;1,2][0,3][1,3]	(* a;-case;-wh_rel;-f --> \d,a;-wh_rel   d,-case;-f   [0,0][0,1][0,2][1,0;1,1;1,2][0,3][1,3] *)
s --> Ew   t   [0,0][0,1][0,2][1,0;1,1;1,2][0,3][0,4]	(* a;-case;-wh_rel;-f --> \d,a;-wh_rel;-f   d,-case   [0,0][0,1][0,2][1,0;1,1;1,2][0,3][0,4] *)
Ck --> Ap   Cr   [0,0][0,1][0,2][1,0;1,1;1,2]	(* a;-case,-wh_rel --> \d,a   d,-case,-wh_rel   [0,0][0,1][0,2][1,0;1,1;1,2] *)
Cl --> Eu   Cr   [0,0][0,1][0,2][1,0;1,1;1,2][0,3]	(* a;-case,-wh_rel;-f --> \d,a;-f   d,-case,-wh_rel   [0,0][0,1][0,2][1,0;1,1;1,2][0,3] *)
Cm --> Ea   DG   [0,0][0,1][0,2;1,0;1,1;1,2]	(* c --> /t,c   t   [0,0][0,1][0,2;1,0;1,1;1,2] *)
Cn --> Dm   [0,3;0,0][0,1][0,2]	(* c_rel --> +wh_rel,c_rel;-wh_rel   [0,3;0,0][0,1][0,2] *)
Ac --> Dl   [0,4;0,0][0,1][0,2][0,3]	(* c_rel;-f --> +wh_rel,c_rel;-f;-wh_rel   [0,4;0,0][0,1][0,2][0,3] *)
Ac --> Dn   [0,3;0,0][0,1][0,2][0,4]	(* c_rel;-f --> +wh_rel,c_rel;-wh_rel;-f   [0,3;0,0][0,1][0,2][0,4] *)
t --> Dv   AU   [0,0][0,1][0,2;1,0;1,1;1,2]	(* d,-case --> /Num,d,-case   Num   [0,0][0,1][0,2;1,0;1,1;1,2] *)
t --> Dz   Cn   [0,0][0,1][0,2;1,0;1,1;1,2]	(* d,-case --> /c_rel,d,-case   c_rel   [0,0][0,1][0,2;1,0;1,1;1,2] *)
Ad --> Dv   q   [0,0][0,1][0,2;1,0;1,1;1,2][1,3]	(* d,-case;-f --> /Num,d,-case   Num;-f   [0,0][0,1][0,2;1,0;1,1;1,2][1,3] *)
Ad --> Dz   Ac   [0,0][0,1][0,2;1,0;1,1;1,2][1,3]	(* d,-case;-f --> /c_rel,d,-case   c_rel;-f   [0,0][0,1][0,2;1,0;1,1;1,2][1,3] *)
Co --> Dv   AV   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4]	(* d,-case;-f;-wh_rel --> /Num,d,-case   Num;-f;-wh_rel   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4] *)
Cp --> Dv   AW   [0,0][0,1][0,2;1,0;1,1;1,2][1,3]	(* d,-case;-wh_rel --> /Num,d,-case   Num;-wh_rel   [0,0][0,1][0,2;1,0;1,1;1,2][1,3] *)
Cq --> Dv   AX   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4]	(* d,-case;-wh_rel;-f --> /Num,d,-case   Num;-wh_rel;-f   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4] *)
Cr --> Dk   [0,3;0,0][0,1][0,2]	(* d,-case,-wh_rel --> +f,d,-case,-wh_rel;-f   [0,3;0,0][0,1][0,2] *)
Ct --> EA   t   [0,0][0,1][0,2][1,0;1,1;1,2]	(* little_v;-case --> /d,little_v   d,-case   [0,0][0,1][0,2][1,0;1,1;1,2] *)
Ae --> EA   Ad   [0,0][0,1][0,2][1,0;1,1;1,2][1,3]	(* little_v;-case;-f --> /d,little_v   d,-case;-f   [0,0][0,1][0,2][1,0;1,1;1,2][1,3] *)
Ae --> EB   t   [0,0][0,1][0,2][1,0;1,1;1,2][0,3]	(* little_v;-case;-f --> /d,little_v;-f   d,-case   [0,0][0,1][0,2][1,0;1,1;1,2][0,3] *)
u --> EA   Co   [0,0][0,1][0,2][1,0;1,1;1,2][1,3][1,4]	(* little_v;-case;-f;-wh_rel --> /d,little_v   d,-case;-f;-wh_rel   [0,0][0,1][0,2][1,0;1,1;1,2][1,3][1,4] *)
u --> EB   Cp   [0,0][0,1][0,2][1,0;1,1;1,2][0,3][1,3]	(* little_v;-case;-f;-wh_rel --> /d,little_v;-f   d,-case;-wh_rel   [0,0][0,1][0,2][1,0;1,1;1,2][0,3][1,3] *)
u --> EC   t   [0,0][0,1][0,2][1,0;1,1;1,2][0,3][0,4]	(* little_v;-case;-f;-wh_rel --> /d,little_v;-f;-wh_rel   d,-case   [0,0][0,1][0,2][1,0;1,1;1,2][0,3][0,4] *)
Af --> EA   Cp   [0,0][0,1][0,2][1,0;1,1;1,2][1,3]	(* little_v;-case;-wh_rel --> /d,little_v   d,-case;-wh_rel   [0,0][0,1][0,2][1,0;1,1;1,2][1,3] *)
Af --> ED   t   [0,0][0,1][0,2][1,0;1,1;1,2][0,3]	(* little_v;-case;-wh_rel --> /d,little_v;-wh_rel   d,-case   [0,0][0,1][0,2][1,0;1,1;1,2][0,3] *)
v --> EA   Cq   [0,0][0,1][0,2][1,0;1,1;1,2][1,3][1,4]	(* little_v;-case;-wh_rel;-f --> /d,little_v   d,-case;-wh_rel;-f   [0,0][0,1][0,2][1,0;1,1;1,2][1,3][1,4] *)
v --> ED   Ad   [0,0][0,1][0,2][1,0;1,1;1,2][0,3][1,3]	(* little_v;-case;-wh_rel;-f --> /d,little_v;-wh_rel   d,-case;-f   [0,0][0,1][0,2][1,0;1,1;1,2][0,3][1,3] *)
v --> EE   t   [0,0][0,1][0,2][1,0;1,1;1,2][0,3][0,4]	(* little_v;-case;-wh_rel;-f --> /d,little_v;-wh_rel;-f   d,-case   [0,0][0,1][0,2][1,0;1,1;1,2][0,3][0,4] *)
Cu --> EA   Cr   [0,0][0,1][0,2][1,0;1,1;1,2]	(* little_v;-case,-wh_rel --> /d,little_v   d,-case,-wh_rel   [0,0][0,1][0,2][1,0;1,1;1,2] *)
Cv --> EB   Cr   [0,0][0,1][0,2][1,0;1,1;1,2][0,3]	(* little_v;-case,-wh_rel;-f --> /d,little_v;-f   d,-case,-wh_rel   [0,0][0,1][0,2][1,0;1,1;1,2][0,3] *)
W --> AE   W   [0,0;0,1;0,2;1,0][1,1][1,2]	(* n --> A   n   [0,0;0,1;0,2;1,0][1,1][1,2] *)
W --> Ds   CW   [0,0][0,1][0,2;1,0;1,1;1,2]	(* n --> /Ce,n   Ce   [0,0][0,1][0,2;1,0;1,1;1,2] *)
W --> Ep   AU   [1,0;1,1;1,2;0,0][0,1][0,2]	(* n --> \Num,n   Num   [1,0;1,1;1,2;0,0][0,1][0,2] *)
X --> AE   X   [0,0;0,1;0,2;1,0][1,1][1,2][1,3]	(* n;-f --> A   n;-f   [0,0;0,1;0,2;1,0][1,1][1,2][1,3] *)
X --> Ds   CX   [0,0][0,1][0,2;1,0;1,1;1,2][1,3]	(* n;-f --> /Ce,n   Ce;-f   [0,0][0,1][0,2;1,0;1,1;1,2][1,3] *)
X --> Ep   q   [1,0;1,1;1,2;0,0][0,1][0,2][1,3]	(* n;-f --> \Num,n   Num;-f   [1,0;1,1;1,2;0,0][0,1][0,2][1,3] *)
X --> Eq   AU   [1,0;1,1;1,2;0,0][0,1][0,2][0,3]	(* n;-f --> \Num,n;-f   Num   [1,0;1,1;1,2;0,0][0,1][0,2][0,3] *)
I --> AE   I   [0,0;0,1;0,2;1,0][1,1][1,2][1,3][1,4]	(* n;-f;-wh_rel --> A   n;-f;-wh_rel   [0,0;0,1;0,2;1,0][1,1][1,2][1,3][1,4] *)
I --> Ds   CY   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4]	(* n;-f;-wh_rel --> /Ce,n   Ce;-f;-wh_rel   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4] *)
I --> Ep   AV   [1,0;1,1;1,2;0,0][0,1][0,2][1,3][1,4]	(* n;-f;-wh_rel --> \Num,n   Num;-f;-wh_rel   [1,0;1,1;1,2;0,0][0,1][0,2][1,3][1,4] *)
I --> Eq   AW   [1,0;1,1;1,2;0,0][0,1][0,2][0,3][1,3]	(* n;-f;-wh_rel --> \Num,n;-f   Num;-wh_rel   [1,0;1,1;1,2;0,0][0,1][0,2][0,3][1,3] *)
I --> Er   AU   [1,0;1,1;1,2;0,0][0,1][0,2][0,3][0,4]	(* n;-f;-wh_rel --> \Num,n;-f;-wh_rel   Num   [1,0;1,1;1,2;0,0][0,1][0,2][0,3][0,4] *)
Y --> AE   Y   [0,0;0,1;0,2;1,0][1,1][1,2][1,3]	(* n;-wh_rel --> A   n;-wh_rel   [0,0;0,1;0,2;1,0][1,1][1,2][1,3] *)
Y --> Ds   CZ   [0,0][0,1][0,2;1,0;1,1;1,2][1,3]	(* n;-wh_rel --> /Ce,n   Ce;-wh_rel   [0,0][0,1][0,2;1,0;1,1;1,2][1,3] *)
Y --> Ep   AW   [1,0;1,1;1,2;0,0][0,1][0,2][1,3]	(* n;-wh_rel --> \Num,n   Num;-wh_rel   [1,0;1,1;1,2;0,0][0,1][0,2][1,3] *)
Y --> Es   AU   [1,0;1,1;1,2;0,0][0,1][0,2][0,3]	(* n;-wh_rel --> \Num,n;-wh_rel   Num   [1,0;1,1;1,2;0,0][0,1][0,2][0,3] *)
J --> AE   J   [0,0;0,1;0,2;1,0][1,1][1,2][1,3][1,4]	(* n;-wh_rel;-f --> A   n;-wh_rel;-f   [0,0;0,1;0,2;1,0][1,1][1,2][1,3][1,4] *)
J --> Ds   Ca   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4]	(* n;-wh_rel;-f --> /Ce,n   Ce;-wh_rel;-f   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4] *)
J --> Ep   AX   [1,0;1,1;1,2;0,0][0,1][0,2][1,3][1,4]	(* n;-wh_rel;-f --> \Num,n   Num;-wh_rel;-f   [1,0;1,1;1,2;0,0][0,1][0,2][1,3][1,4] *)
J --> Es   q   [1,0;1,1;1,2;0,0][0,1][0,2][0,3][1,3]	(* n;-wh_rel;-f --> \Num,n;-wh_rel   Num;-f   [1,0;1,1;1,2;0,0][0,1][0,2][0,3][1,3] *)
J --> Et   AU   [1,0;1,1;1,2;0,0][0,1][0,2][0,3][0,4]	(* n;-wh_rel;-f --> \Num,n;-wh_rel;-f   Num   [1,0;1,1;1,2;0,0][0,1][0,2][0,3][0,4] *)
Ag --> AE   Ag   [0,0;0,1;0,2;1,0][1,1][1,2]	(* n,-f --> A   n,-f   [0,0;0,1;0,2;1,0][1,1][1,2] *)
Cw --> Ej   Cb   [0,0][1,1;0,1][0,2;1,0;1,2]	(* p_for --> =>Pfor,p_for   Pfor   [0,0][1,1;0,1][0,2;1,0;1,2] *)
Cx --> Ej   Cc   [0,0][1,1;0,1][0,2;1,0;1,2][1,3]	(* p_for;-f --> =>Pfor,p_for   Pfor;-f   [0,0][1,1;0,1][0,2;1,0;1,2][1,3] *)
Cy --> Ej   Cd   [0,0][1,1;0,1][0,2;1,0;1,2][1,3][1,4]	(* p_for;-f;-wh_rel --> =>Pfor,p_for   Pfor;-f;-wh_rel   [0,0][1,1;0,1][0,2;1,0;1,2][1,3][1,4] *)
Cz --> Ej   AY   [0,0][1,1;0,1][0,2;1,0;1,2][1,3]	(* p_for;-wh_rel --> =>Pfor,p_for   Pfor;-wh_rel   [0,0][1,1;0,1][0,2;1,0;1,2][1,3] *)
DA --> Ej   Ce   [0,0][1,1;0,1][0,2;1,0;1,2][1,3][1,4]	(* p_for;-wh_rel;-f --> =>Pfor,p_for   Pfor;-wh_rel;-f   [0,0][1,1;0,1][0,2;1,0;1,2][1,3][1,4] *)
DB --> Ek   Cf   [0,0][1,1;0,1][0,2;1,0;1,2]	(* p_to --> =>Pto,p_to   Pto   [0,0][1,1;0,1][0,2;1,0;1,2] *)
DC --> Ek   Cg   [0,0][1,1;0,1][0,2;1,0;1,2][1,3]	(* p_to;-f --> =>Pto,p_to   Pto;-f   [0,0][1,1;0,1][0,2;1,0;1,2][1,3] *)
DD --> Ek   Ch   [0,0][1,1;0,1][0,2;1,0;1,2][1,3][1,4]	(* p_to;-f;-wh_rel --> =>Pto,p_to   Pto;-f;-wh_rel   [0,0][1,1;0,1][0,2;1,0;1,2][1,3][1,4] *)
DE --> Ek   AZ   [0,0][1,1;0,1][0,2;1,0;1,2][1,3]	(* p_to;-wh_rel --> =>Pto,p_to   Pto;-wh_rel   [0,0][1,1;0,1][0,2;1,0;1,2][1,3] *)
DF --> Ek   Ci   [0,0][1,1;0,1][0,2;1,0;1,2][1,3][1,4]	(* p_to;-wh_rel;-f --> =>Pto,p_to   Pto;-wh_rel;-f   [0,0][1,1;0,1][0,2;1,0;1,2][1,3][1,4] *)
DG --> M   [0,3;0,0][0,1][0,2]	(* t --> +case,t;-case   [0,3;0,0][0,1][0,2] *)
DH --> N   [0,3;0,0][0,1][0,2][0,4]	(* t;-f --> +case,t;-case;-f   [0,3;0,0][0,1][0,2][0,4] *)
DI --> O   [0,3;0,0][0,1][0,2][0,4][0,5]	(* t;-f;-wh_rel --> +case,t;-case;-f;-wh_rel   [0,3;0,0][0,1][0,2][0,4][0,5] *)
Ah --> P   [0,3;0,0][0,1][0,2][0,4]	(* t;-wh_rel --> +case,t;-case;-wh_rel   [0,3;0,0][0,1][0,2][0,4] *)
Ah --> R   [0,0][0,1][0,2][0,3]	(* t;-wh_rel --> +case,t;-case,-wh_rel   [0,0][0,1][0,2][0,3] *)
Ai --> Q   [0,3;0,0][0,1][0,2][0,4][0,5]	(* t;-wh_rel;-f --> +case,t;-case;-wh_rel;-f   [0,3;0,0][0,1][0,2][0,4][0,5] *)
Ai --> T   [0,0][0,1][0,2][0,3][0,4]	(* t;-wh_rel;-f --> +case,t;-case,-wh_rel;-f   [0,0][0,1][0,2][0,3][0,4] *)
H --> DJ   H   [1,0][1,1][1,2;0,0;0,1;0,2]	(* v --> tmp   v   [1,0][1,1][1,2;0,0;0,1;0,2] *)
H --> An   [0,3;0,0][0,1][0,2]	(* v --> +case,v;-case   [0,3;0,0][0,1][0,2] *)
H --> Do   AE   [0,0][0,1][0,2;1,0;1,1;1,2]	(* v --> /A,v   A   [0,0][0,1][0,2;1,0;1,1;1,2] *)
H --> Dt   CW   [0,0][0,1][0,2;1,0;1,1;1,2]	(* v --> /Ce,v   Ce   [0,0][0,1][0,2;1,0;1,1;1,2] *)
H --> EX   Cw   [0,0][0,1][0,2;1,0;1,1;1,2]	(* v --> /p_for,v   p_for   [0,0][0,1][0,2;1,0;1,1;1,2] *)
Z --> DJ   Z   [1,0][1,1][1,2;0,0;0,1;0,2][1,3]	(* v;-f --> tmp   v;-f   [1,0][1,1][1,2;0,0;0,1;0,2][1,3] *)
Z --> AA   [0,3;0,0][0,1][0,2][0,4]	(* v;-f --> +case,v;-case;-f   [0,3;0,0][0,1][0,2][0,4] *)
Z --> Dt   CX   [0,0][0,1][0,2;1,0;1,1;1,2][1,3]	(* v;-f --> /Ce,v   Ce;-f   [0,0][0,1][0,2;1,0;1,1;1,2][1,3] *)
Z --> EX   Cx   [0,0][0,1][0,2;1,0;1,1;1,2][1,3]	(* v;-f --> /p_for,v   p_for;-f   [0,0][0,1][0,2;1,0;1,1;1,2][1,3] *)
a --> DJ   a   [1,0][1,1][1,2;0,0;0,1;0,2][1,3][1,4]	(* v;-f;-wh_rel --> tmp   v;-f;-wh_rel   [1,0][1,1][1,2;0,0;0,1;0,2][1,3][1,4] *)
a --> b   [0,3;0,0][0,1][0,2][0,4][0,5]	(* v;-f;-wh_rel --> +case,v;-case;-f;-wh_rel   [0,3;0,0][0,1][0,2][0,4][0,5] *)
a --> Dt   CY   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4]	(* v;-f;-wh_rel --> /Ce,v   Ce;-f;-wh_rel   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4] *)
a --> EX   Cy   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4]	(* v;-f;-wh_rel --> /p_for,v   p_for;-f;-wh_rel   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4] *)
K --> DJ   K   [1,0][1,1][1,2;0,0;0,1;0,2][1,3]	(* v;-wh_rel --> tmp   v;-wh_rel   [1,0][1,1][1,2;0,0;0,1;0,2][1,3] *)
K --> AB   [0,3;0,0][0,1][0,2][0,4]	(* v;-wh_rel --> +case,v;-case;-wh_rel   [0,3;0,0][0,1][0,2][0,4] *)
K --> Ao   [0,0][0,1][0,2][0,3]	(* v;-wh_rel --> +case,v;-case,-wh_rel   [0,0][0,1][0,2][0,3] *)
K --> Dt   CZ   [0,0][0,1][0,2;1,0;1,1;1,2][1,3]	(* v;-wh_rel --> /Ce,v   Ce;-wh_rel   [0,0][0,1][0,2;1,0;1,1;1,2][1,3] *)
K --> EX   Cz   [0,0][0,1][0,2;1,0;1,1;1,2][1,3]	(* v;-wh_rel --> /p_for,v   p_for;-wh_rel   [0,0][0,1][0,2;1,0;1,1;1,2][1,3] *)
L --> DJ   L   [1,0][1,1][1,2;0,0;0,1;0,2][1,3][1,4]	(* v;-wh_rel;-f --> tmp   v;-wh_rel;-f   [1,0][1,1][1,2;0,0;0,1;0,2][1,3][1,4] *)
L --> c   [0,3;0,0][0,1][0,2][0,4][0,5]	(* v;-wh_rel;-f --> +case,v;-case;-wh_rel;-f   [0,3;0,0][0,1][0,2][0,4][0,5] *)
L --> Dd   [0,0][0,1][0,2][0,3][0,4]	(* v;-wh_rel;-f --> +case,v;-case,-wh_rel;-f   [0,0][0,1][0,2][0,3][0,4] *)
L --> Dt   Ca   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4]	(* v;-wh_rel;-f --> /Ce,v   Ce;-wh_rel;-f   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4] *)
L --> EX   DA   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4]	(* v;-wh_rel;-f --> /p_for,v   p_for;-wh_rel;-f   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4] *)
DK --> EF   t   [0,0][0,1][0,2][1,0;1,1;1,2]	(* ven;-case --> /d,ven   d,-case   [0,0][0,1][0,2][1,0;1,1;1,2] *)
Aj --> EF   Ad   [0,0][0,1][0,2][1,0;1,1;1,2][1,3]	(* ven;-case;-f --> /d,ven   d,-case;-f   [0,0][0,1][0,2][1,0;1,1;1,2][1,3] *)
Aj --> EG   t   [0,0][0,1][0,2][1,0;1,1;1,2][0,3]	(* ven;-case;-f --> /d,ven;-f   d,-case   [0,0][0,1][0,2][1,0;1,1;1,2][0,3] *)
w --> EF   Co   [0,0][0,1][0,2][1,0;1,1;1,2][1,3][1,4]	(* ven;-case;-f;-wh_rel --> /d,ven   d,-case;-f;-wh_rel   [0,0][0,1][0,2][1,0;1,1;1,2][1,3][1,4] *)
w --> EG   Cp   [0,0][0,1][0,2][1,0;1,1;1,2][0,3][1,3]	(* ven;-case;-f;-wh_rel --> /d,ven;-f   d,-case;-wh_rel   [0,0][0,1][0,2][1,0;1,1;1,2][0,3][1,3] *)
w --> EH   t   [0,0][0,1][0,2][1,0;1,1;1,2][0,3][0,4]	(* ven;-case;-f;-wh_rel --> /d,ven;-f;-wh_rel   d,-case   [0,0][0,1][0,2][1,0;1,1;1,2][0,3][0,4] *)
Ak --> EF   Cp   [0,0][0,1][0,2][1,0;1,1;1,2][1,3]	(* ven;-case;-wh_rel --> /d,ven   d,-case;-wh_rel   [0,0][0,1][0,2][1,0;1,1;1,2][1,3] *)
Ak --> EI   t   [0,0][0,1][0,2][1,0;1,1;1,2][0,3]	(* ven;-case;-wh_rel --> /d,ven;-wh_rel   d,-case   [0,0][0,1][0,2][1,0;1,1;1,2][0,3] *)
x --> EF   Cq   [0,0][0,1][0,2][1,0;1,1;1,2][1,3][1,4]	(* ven;-case;-wh_rel;-f --> /d,ven   d,-case;-wh_rel;-f   [0,0][0,1][0,2][1,0;1,1;1,2][1,3][1,4] *)
x --> EI   Ad   [0,0][0,1][0,2][1,0;1,1;1,2][0,3][1,3]	(* ven;-case;-wh_rel;-f --> /d,ven;-wh_rel   d,-case;-f   [0,0][0,1][0,2][1,0;1,1;1,2][0,3][1,3] *)
x --> EJ   t   [0,0][0,1][0,2][1,0;1,1;1,2][0,3][0,4]	(* ven;-case;-wh_rel;-f --> /d,ven;-wh_rel;-f   d,-case   [0,0][0,1][0,2][1,0;1,1;1,2][0,3][0,4] *)
DL --> EF   Cr   [0,0][0,1][0,2][1,0;1,1;1,2]	(* ven;-case,-wh_rel --> /d,ven   d,-case,-wh_rel   [0,0][0,1][0,2][1,0;1,1;1,2] *)
DM --> EG   Cr   [0,0][0,1][0,2][1,0;1,1;1,2][0,3]	(* ven;-case,-wh_rel;-f --> /d,ven;-f   d,-case,-wh_rel   [0,0][0,1][0,2][1,0;1,1;1,2][0,3] *)
DN --> EK   t   [0,0][0,1][0,2][1,0;1,1;1,2]	(* ving;-case --> /d,ving   d,-case   [0,0][0,1][0,2][1,0;1,1;1,2] *)
Al --> EK   Ad   [0,0][0,1][0,2][1,0;1,1;1,2][1,3]	(* ving;-case;-f --> /d,ving   d,-case;-f   [0,0][0,1][0,2][1,0;1,1;1,2][1,3] *)
Al --> EL   t   [0,0][0,1][0,2][1,0;1,1;1,2][0,3]	(* ving;-case;-f --> /d,ving;-f   d,-case   [0,0][0,1][0,2][1,0;1,1;1,2][0,3] *)
y --> EK   Co   [0,0][0,1][0,2][1,0;1,1;1,2][1,3][1,4]	(* ving;-case;-f;-wh_rel --> /d,ving   d,-case;-f;-wh_rel   [0,0][0,1][0,2][1,0;1,1;1,2][1,3][1,4] *)
y --> EL   Cp   [0,0][0,1][0,2][1,0;1,1;1,2][0,3][1,3]	(* ving;-case;-f;-wh_rel --> /d,ving;-f   d,-case;-wh_rel   [0,0][0,1][0,2][1,0;1,1;1,2][0,3][1,3] *)
y --> EM   t   [0,0][0,1][0,2][1,0;1,1;1,2][0,3][0,4]	(* ving;-case;-f;-wh_rel --> /d,ving;-f;-wh_rel   d,-case   [0,0][0,1][0,2][1,0;1,1;1,2][0,3][0,4] *)
Am --> EK   Cp   [0,0][0,1][0,2][1,0;1,1;1,2][1,3]	(* ving;-case;-wh_rel --> /d,ving   d,-case;-wh_rel   [0,0][0,1][0,2][1,0;1,1;1,2][1,3] *)
Am --> EN   t   [0,0][0,1][0,2][1,0;1,1;1,2][0,3]	(* ving;-case;-wh_rel --> /d,ving;-wh_rel   d,-case   [0,0][0,1][0,2][1,0;1,1;1,2][0,3] *)
z --> EK   Cq   [0,0][0,1][0,2][1,0;1,1;1,2][1,3][1,4]	(* ving;-case;-wh_rel;-f --> /d,ving   d,-case;-wh_rel;-f   [0,0][0,1][0,2][1,0;1,1;1,2][1,3][1,4] *)
z --> EN   Ad   [0,0][0,1][0,2][1,0;1,1;1,2][0,3][1,3]	(* ving;-case;-wh_rel;-f --> /d,ving;-wh_rel   d,-case;-f   [0,0][0,1][0,2][1,0;1,1;1,2][0,3][1,3] *)
z --> EO   t   [0,0][0,1][0,2][1,0;1,1;1,2][0,3][0,4]	(* ving;-case;-wh_rel;-f --> /d,ving;-wh_rel;-f   d,-case   [0,0][0,1][0,2][1,0;1,1;1,2][0,3][0,4] *)
DO --> EK   Cr   [0,0][0,1][0,2][1,0;1,1;1,2]	(* ving;-case,-wh_rel --> /d,ving   d,-case,-wh_rel   [0,0][0,1][0,2][1,0;1,1;1,2] *)
DP --> EL   Cr   [0,0][0,1][0,2][1,0;1,1;1,2][0,3]	(* ving;-case,-wh_rel;-f --> /d,ving;-f   d,-case,-wh_rel   [0,0][0,1][0,2][1,0;1,1;1,2][0,3] *)
DQ --> EP   t   [0,0][0,1][0,2][1,0;1,1;1,2]	(* +case,Pfor;-case --> /d,+case,Pfor   d,-case   [0,0][0,1][0,2][1,0;1,1;1,2] *)
DR --> EP   Ad   [0,0][0,1][0,2][1,0;1,1;1,2][1,3]	(* +case,Pfor;-case;-f --> /d,+case,Pfor   d,-case;-f   [0,0][0,1][0,2][1,0;1,1;1,2][1,3] *)
DT --> EP   Co   [0,0][0,1][0,2][1,0;1,1;1,2][1,3][1,4]	(* +case,Pfor;-case;-f;-wh_rel --> /d,+case,Pfor   d,-case;-f;-wh_rel   [0,0][0,1][0,2][1,0;1,1;1,2][1,3][1,4] *)
DU --> EP   Cp   [0,0][0,1][0,2][1,0;1,1;1,2][1,3]	(* +case,Pfor;-case;-wh_rel --> /d,+case,Pfor   d,-case;-wh_rel   [0,0][0,1][0,2][1,0;1,1;1,2][1,3] *)
DV --> EP   Cq   [0,0][0,1][0,2][1,0;1,1;1,2][1,3][1,4]	(* +case,Pfor;-case;-wh_rel;-f --> /d,+case,Pfor   d,-case;-wh_rel;-f   [0,0][0,1][0,2][1,0;1,1;1,2][1,3][1,4] *)
DW --> EP   Cr   [0,0][0,1][0,2][1,0;1,1;1,2]	(* +case,Pfor;-case,-wh_rel --> /d,+case,Pfor   d,-case,-wh_rel   [0,0][0,1][0,2][1,0;1,1;1,2] *)
DX --> EQ   t   [0,0][0,1][0,2][1,0;1,1;1,2]	(* +case,Pto;-case --> /d,+case,Pto   d,-case   [0,0][0,1][0,2][1,0;1,1;1,2] *)
DY --> EQ   Ad   [0,0][0,1][0,2][1,0;1,1;1,2][1,3]	(* +case,Pto;-case;-f --> /d,+case,Pto   d,-case;-f   [0,0][0,1][0,2][1,0;1,1;1,2][1,3] *)
DZ --> EQ   Co   [0,0][0,1][0,2][1,0;1,1;1,2][1,3][1,4]	(* +case,Pto;-case;-f;-wh_rel --> /d,+case,Pto   d,-case;-f;-wh_rel   [0,0][0,1][0,2][1,0;1,1;1,2][1,3][1,4] *)
Da --> EQ   Cp   [0,0][0,1][0,2][1,0;1,1;1,2][1,3]	(* +case,Pto;-case;-wh_rel --> /d,+case,Pto   d,-case;-wh_rel   [0,0][0,1][0,2][1,0;1,1;1,2][1,3] *)
Db --> EQ   Cq   [0,0][0,1][0,2][1,0;1,1;1,2][1,3][1,4]	(* +case,Pto;-case;-wh_rel;-f --> /d,+case,Pto   d,-case;-wh_rel;-f   [0,0][0,1][0,2][1,0;1,1;1,2][1,3][1,4] *)
Dc --> EQ   Cr   [0,0][0,1][0,2][1,0;1,1;1,2]	(* +case,Pto;-case,-wh_rel --> /d,+case,Pto   d,-case,-wh_rel   [0,0][0,1][0,2][1,0;1,1;1,2] *)
M --> EV   Ct   [0,0][0,1][0,2;1,0;1,1;1,2][1,3]	(* +case,t;-case --> /little_v,+case,t   little_v;-case   [0,0][0,1][0,2;1,0;1,1;1,2][1,3] *)
M --> Eg   AF   [0,0][1,1;0,1][0,2;1,0;1,2][1,3]	(* +case,t;-case --> =>Be,+case,t   Be;-case   [0,0][1,1;0,1][0,2;1,0;1,2][1,3] *)
M --> Eh   AM   [0,0][1,1;0,1][0,2;1,0;1,2][1,3]	(* +case,t;-case --> =>Have,+case,t   Have;-case   [0,0][1,1;0,1][0,2;1,0;1,2][1,3] *)
M --> Ei   j   [0,0][1,1;0,1][0,2;1,0;1,2][1,3]	(* +case,t;-case --> =>Modal,+case,t   Modal;-case   [0,0][1,1;0,1][0,2;1,0;1,2][1,3] *)
M --> El   Ct   [0,0][1,1;0,1][0,2;1,0;1,2][1,3]	(* +case,t;-case --> =>little_v,+case,t   little_v;-case   [0,0][1,1;0,1][0,2;1,0;1,2][1,3] *)
N --> EV   Ae   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4]	(* +case,t;-case;-f --> /little_v,+case,t   little_v;-case;-f   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4] *)
N --> Eg   AG   [0,0][1,1;0,1][0,2;1,0;1,2][1,3][1,4]	(* +case,t;-case;-f --> =>Be,+case,t   Be;-case;-f   [0,0][1,1;0,1][0,2;1,0;1,2][1,3][1,4] *)
N --> Eh   AN   [0,0][1,1;0,1][0,2;1,0;1,2][1,3][1,4]	(* +case,t;-case;-f --> =>Have,+case,t   Have;-case;-f   [0,0][1,1;0,1][0,2;1,0;1,2][1,3][1,4] *)
N --> Ei   k   [0,0][1,1;0,1][0,2;1,0;1,2][1,3][1,4]	(* +case,t;-case;-f --> =>Modal,+case,t   Modal;-case;-f   [0,0][1,1;0,1][0,2;1,0;1,2][1,3][1,4] *)
N --> El   Ae   [0,0][1,1;0,1][0,2;1,0;1,2][1,3][1,4]	(* +case,t;-case;-f --> =>little_v,+case,t   little_v;-case;-f   [0,0][1,1;0,1][0,2;1,0;1,2][1,3][1,4] *)
O --> EV   u   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4][1,5]	(* +case,t;-case;-f;-wh_rel --> /little_v,+case,t   little_v;-case;-f;-wh_rel   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4][1,5] *)
O --> Eg   AH   [0,0][1,1;0,1][0,2;1,0;1,2][1,3][1,4][1,5]	(* +case,t;-case;-f;-wh_rel --> =>Be,+case,t   Be;-case;-f;-wh_rel   [0,0][1,1;0,1][0,2;1,0;1,2][1,3][1,4][1,5] *)
O --> Eh   AO   [0,0][1,1;0,1][0,2;1,0;1,2][1,3][1,4][1,5]	(* +case,t;-case;-f;-wh_rel --> =>Have,+case,t   Have;-case;-f;-wh_rel   [0,0][1,1;0,1][0,2;1,0;1,2][1,3][1,4][1,5] *)
O --> Ei   l   [0,0][1,1;0,1][0,2;1,0;1,2][1,3][1,4][1,5]	(* +case,t;-case;-f;-wh_rel --> =>Modal,+case,t   Modal;-case;-f;-wh_rel   [0,0][1,1;0,1][0,2;1,0;1,2][1,3][1,4][1,5] *)
O --> El   u   [0,0][1,1;0,1][0,2;1,0;1,2][1,3][1,4][1,5]	(* +case,t;-case;-f;-wh_rel --> =>little_v,+case,t   little_v;-case;-f;-wh_rel   [0,0][1,1;0,1][0,2;1,0;1,2][1,3][1,4][1,5] *)
P --> EV   Af   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4]	(* +case,t;-case;-wh_rel --> /little_v,+case,t   little_v;-case;-wh_rel   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4] *)
P --> Eg   AI   [0,0][1,1;0,1][0,2;1,0;1,2][1,3][1,4]	(* +case,t;-case;-wh_rel --> =>Be,+case,t   Be;-case;-wh_rel   [0,0][1,1;0,1][0,2;1,0;1,2][1,3][1,4] *)
P --> Eh   AP   [0,0][1,1;0,1][0,2;1,0;1,2][1,3][1,4]	(* +case,t;-case;-wh_rel --> =>Have,+case,t   Have;-case;-wh_rel   [0,0][1,1;0,1][0,2;1,0;1,2][1,3][1,4] *)
P --> Ei   m   [0,0][1,1;0,1][0,2;1,0;1,2][1,3][1,4]	(* +case,t;-case;-wh_rel --> =>Modal,+case,t   Modal;-case;-wh_rel   [0,0][1,1;0,1][0,2;1,0;1,2][1,3][1,4] *)
P --> El   Af   [0,0][1,1;0,1][0,2;1,0;1,2][1,3][1,4]	(* +case,t;-case;-wh_rel --> =>little_v,+case,t   little_v;-case;-wh_rel   [0,0][1,1;0,1][0,2;1,0;1,2][1,3][1,4] *)
Q --> EV   v   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4][1,5]	(* +case,t;-case;-wh_rel;-f --> /little_v,+case,t   little_v;-case;-wh_rel;-f   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4][1,5] *)
Q --> Eg   AJ   [0,0][1,1;0,1][0,2;1,0;1,2][1,3][1,4][1,5]	(* +case,t;-case;-wh_rel;-f --> =>Be,+case,t   Be;-case;-wh_rel;-f   [0,0][1,1;0,1][0,2;1,0;1,2][1,3][1,4][1,5] *)
Q --> Eh   AQ   [0,0][1,1;0,1][0,2;1,0;1,2][1,3][1,4][1,5]	(* +case,t;-case;-wh_rel;-f --> =>Have,+case,t   Have;-case;-wh_rel;-f   [0,0][1,1;0,1][0,2;1,0;1,2][1,3][1,4][1,5] *)
Q --> Ei   n   [0,0][1,1;0,1][0,2;1,0;1,2][1,3][1,4][1,5]	(* +case,t;-case;-wh_rel;-f --> =>Modal,+case,t   Modal;-case;-wh_rel;-f   [0,0][1,1;0,1][0,2;1,0;1,2][1,3][1,4][1,5] *)
Q --> El   v   [0,0][1,1;0,1][0,2;1,0;1,2][1,3][1,4][1,5]	(* +case,t;-case;-wh_rel;-f --> =>little_v,+case,t   little_v;-case;-wh_rel;-f   [0,0][1,1;0,1][0,2;1,0;1,2][1,3][1,4][1,5] *)
R --> EV   Cu   [0,0][0,1][0,2;1,0;1,1;1,2][1,3]	(* +case,t;-case,-wh_rel --> /little_v,+case,t   little_v;-case,-wh_rel   [0,0][0,1][0,2;1,0;1,1;1,2][1,3] *)
R --> Eg   AK   [0,0][1,1;0,1][0,2;1,0;1,2][1,3]	(* +case,t;-case,-wh_rel --> =>Be,+case,t   Be;-case,-wh_rel   [0,0][1,1;0,1][0,2;1,0;1,2][1,3] *)
R --> Eh   AR   [0,0][1,1;0,1][0,2;1,0;1,2][1,3]	(* +case,t;-case,-wh_rel --> =>Have,+case,t   Have;-case,-wh_rel   [0,0][1,1;0,1][0,2;1,0;1,2][1,3] *)
R --> Ei   o   [0,0][1,1;0,1][0,2;1,0;1,2][1,3]	(* +case,t;-case,-wh_rel --> =>Modal,+case,t   Modal;-case,-wh_rel   [0,0][1,1;0,1][0,2;1,0;1,2][1,3] *)
R --> El   Cu   [0,0][1,1;0,1][0,2;1,0;1,2][1,3]	(* +case,t;-case,-wh_rel --> =>little_v,+case,t   little_v;-case,-wh_rel   [0,0][1,1;0,1][0,2;1,0;1,2][1,3] *)
T --> EV   Cv   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4]	(* +case,t;-case,-wh_rel;-f --> /little_v,+case,t   little_v;-case,-wh_rel;-f   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4] *)
T --> Eg   AL   [0,0][1,1;0,1][0,2;1,0;1,2][1,3][1,4]	(* +case,t;-case,-wh_rel;-f --> =>Be,+case,t   Be;-case,-wh_rel;-f   [0,0][1,1;0,1][0,2;1,0;1,2][1,3][1,4] *)
T --> Eh   AT   [0,0][1,1;0,1][0,2;1,0;1,2][1,3][1,4]	(* +case,t;-case,-wh_rel;-f --> =>Have,+case,t   Have;-case,-wh_rel;-f   [0,0][1,1;0,1][0,2;1,0;1,2][1,3][1,4] *)
T --> Ei   p   [0,0][1,1;0,1][0,2;1,0;1,2][1,3][1,4]	(* +case,t;-case,-wh_rel;-f --> =>Modal,+case,t   Modal;-case,-wh_rel;-f   [0,0][1,1;0,1][0,2;1,0;1,2][1,3][1,4] *)
T --> El   Cv   [0,0][1,1;0,1][0,2;1,0;1,2][1,3][1,4]	(* +case,t;-case,-wh_rel;-f --> =>little_v,+case,t   little_v;-case,-wh_rel;-f   [0,0][1,1;0,1][0,2;1,0;1,2][1,3][1,4] *)
An --> ER   t   [0,0][0,1][0,2][1,0;1,1;1,2]	(* +case,v;-case --> /d,+case,v   d,-case   [0,0][0,1][0,2][1,0;1,1;1,2] *)
An --> Ex   t   [0,0][0,1][0,2][1,0;1,1;1,2]	(* +case,v;-case --> \d,+case,v   d,-case   [0,0][0,1][0,2][1,0;1,1;1,2] *)
AA --> ER   Ad   [0,0][0,1][0,2][1,0;1,1;1,2][1,3]	(* +case,v;-case;-f --> /d,+case,v   d,-case;-f   [0,0][0,1][0,2][1,0;1,1;1,2][1,3] *)
AA --> Ex   Ad   [0,0][0,1][0,2][1,0;1,1;1,2][1,3]	(* +case,v;-case;-f --> \d,+case,v   d,-case;-f   [0,0][0,1][0,2][1,0;1,1;1,2][1,3] *)
AA --> Ey   t   [0,0][0,1][0,2][1,0;1,1;1,2][0,3]	(* +case,v;-case;-f --> \d,+case,v;-f   d,-case   [0,0][0,1][0,2][1,0;1,1;1,2][0,3] *)
b --> ER   Co   [0,0][0,1][0,2][1,0;1,1;1,2][1,3][1,4]	(* +case,v;-case;-f;-wh_rel --> /d,+case,v   d,-case;-f;-wh_rel   [0,0][0,1][0,2][1,0;1,1;1,2][1,3][1,4] *)
b --> Ex   Co   [0,0][0,1][0,2][1,0;1,1;1,2][1,3][1,4]	(* +case,v;-case;-f;-wh_rel --> \d,+case,v   d,-case;-f;-wh_rel   [0,0][0,1][0,2][1,0;1,1;1,2][1,3][1,4] *)
b --> Ey   Cp   [0,0][0,1][0,2][1,0;1,1;1,2][0,3][1,3]	(* +case,v;-case;-f;-wh_rel --> \d,+case,v;-f   d,-case;-wh_rel   [0,0][0,1][0,2][1,0;1,1;1,2][0,3][1,3] *)
b --> Ez   t   [0,0][0,1][0,2][1,0;1,1;1,2][0,3][0,4]	(* +case,v;-case;-f;-wh_rel --> \d,+case,v;-f;-wh_rel   d,-case   [0,0][0,1][0,2][1,0;1,1;1,2][0,3][0,4] *)
AB --> ER   Cp   [0,0][0,1][0,2][1,0;1,1;1,2][1,3]	(* +case,v;-case;-wh_rel --> /d,+case,v   d,-case;-wh_rel   [0,0][0,1][0,2][1,0;1,1;1,2][1,3] *)
AB --> Ex   Cp   [0,0][0,1][0,2][1,0;1,1;1,2][1,3]	(* +case,v;-case;-wh_rel --> \d,+case,v   d,-case;-wh_rel   [0,0][0,1][0,2][1,0;1,1;1,2][1,3] *)
AB --> FA   t   [0,0][0,1][0,2][1,0;1,1;1,2][0,3]	(* +case,v;-case;-wh_rel --> \d,+case,v;-wh_rel   d,-case   [0,0][0,1][0,2][1,0;1,1;1,2][0,3] *)
c --> ER   Cq   [0,0][0,1][0,2][1,0;1,1;1,2][1,3][1,4]	(* +case,v;-case;-wh_rel;-f --> /d,+case,v   d,-case;-wh_rel;-f   [0,0][0,1][0,2][1,0;1,1;1,2][1,3][1,4] *)
c --> Ex   Cq   [0,0][0,1][0,2][1,0;1,1;1,2][1,3][1,4]	(* +case,v;-case;-wh_rel;-f --> \d,+case,v   d,-case;-wh_rel;-f   [0,0][0,1][0,2][1,0;1,1;1,2][1,3][1,4] *)
c --> FA   Ad   [0,0][0,1][0,2][1,0;1,1;1,2][0,3][1,3]	(* +case,v;-case;-wh_rel;-f --> \d,+case,v;-wh_rel   d,-case;-f   [0,0][0,1][0,2][1,0;1,1;1,2][0,3][1,3] *)
c --> FB   t   [0,0][0,1][0,2][1,0;1,1;1,2][0,3][0,4]	(* +case,v;-case;-wh_rel;-f --> \d,+case,v;-wh_rel;-f   d,-case   [0,0][0,1][0,2][1,0;1,1;1,2][0,3][0,4] *)
Ao --> ER   Cr   [0,0][0,1][0,2][1,0;1,1;1,2]	(* +case,v;-case,-wh_rel --> /d,+case,v   d,-case,-wh_rel   [0,0][0,1][0,2][1,0;1,1;1,2] *)
Ao --> Ex   Cr   [0,0][0,1][0,2][1,0;1,1;1,2]	(* +case,v;-case,-wh_rel --> \d,+case,v   d,-case,-wh_rel   [0,0][0,1][0,2][1,0;1,1;1,2] *)
Dd --> Ey   Cr   [0,0][0,1][0,2][1,0;1,1;1,2][0,3]	(* +case,v;-case,-wh_rel;-f --> \d,+case,v;-f   d,-case,-wh_rel   [0,0][0,1][0,2][1,0;1,1;1,2][0,3] *)
De --> ET   t   [0,0][0,1][0,2][1,0;1,1;1,2]	(* +case,\d,a;-case --> /d,+case,\d,a   d,-case   [0,0][0,1][0,2][1,0;1,1;1,2] *)
Df --> ET   Ad   [0,0][0,1][0,2][1,0;1,1;1,2][1,3]	(* +case,\d,a;-case;-f --> /d,+case,\d,a   d,-case;-f   [0,0][0,1][0,2][1,0;1,1;1,2][1,3] *)
Dg --> ET   Co   [0,0][0,1][0,2][1,0;1,1;1,2][1,3][1,4]	(* +case,\d,a;-case;-f;-wh_rel --> /d,+case,\d,a   d,-case;-f;-wh_rel   [0,0][0,1][0,2][1,0;1,1;1,2][1,3][1,4] *)
Dh --> ET   Cp   [0,0][0,1][0,2][1,0;1,1;1,2][1,3]	(* +case,\d,a;-case;-wh_rel --> /d,+case,\d,a   d,-case;-wh_rel   [0,0][0,1][0,2][1,0;1,1;1,2][1,3] *)
Di --> ET   Cq   [0,0][0,1][0,2][1,0;1,1;1,2][1,3][1,4]	(* +case,\d,a;-case;-wh_rel;-f --> /d,+case,\d,a   d,-case;-wh_rel;-f   [0,0][0,1][0,2][1,0;1,1;1,2][1,3][1,4] *)
Dj --> ET   Cr   [0,0][0,1][0,2][1,0;1,1;1,2]	(* +case,\d,a;-case,-wh_rel --> /d,+case,\d,a   d,-case,-wh_rel   [0,0][0,1][0,2][1,0;1,1;1,2] *)
Dk --> Dw   q   [0,0][0,1][0,2;1,0;1,1;1,2][1,3]	(* +f,d,-case,-wh_rel;-f --> /Num,+f,d,-case,-wh_rel   Num;-f   [0,0][0,1][0,2;1,0;1,1;1,2][1,3] *)
Dl --> Eb   DI   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4]	(* +wh_rel,c_rel;-f;-wh_rel --> /t,+wh_rel,c_rel   t;-f;-wh_rel   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4] *)
Dm --> Eb   Ah   [0,0][0,1][0,2;1,0;1,1;1,2][1,3]	(* +wh_rel,c_rel;-wh_rel --> /t,+wh_rel,c_rel   t;-wh_rel   [0,0][0,1][0,2;1,0;1,1;1,2][1,3] *)
Dn --> Eb   Ai   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4]	(* +wh_rel,c_rel;-wh_rel;-f --> /t,+wh_rel,c_rel   t;-wh_rel;-f   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4] *)
EA --> Em   H   [0,0][1,1;0,1][0,2;1,0;1,2]	(* /d,little_v --> =>v,/d,little_v   v   [0,0][1,1;0,1][0,2;1,0;1,2] *)
EB --> Em   Z   [0,0][1,1;0,1][0,2;1,0;1,2][1,3]	(* /d,little_v;-f --> =>v,/d,little_v   v;-f   [0,0][1,1;0,1][0,2;1,0;1,2][1,3] *)
EC --> Em   a   [0,0][1,1;0,1][0,2;1,0;1,2][1,3][1,4]	(* /d,little_v;-f;-wh_rel --> =>v,/d,little_v   v;-f;-wh_rel   [0,0][1,1;0,1][0,2;1,0;1,2][1,3][1,4] *)
ED --> Em   K   [0,0][1,1;0,1][0,2;1,0;1,2][1,3]	(* /d,little_v;-wh_rel --> =>v,/d,little_v   v;-wh_rel   [0,0][1,1;0,1][0,2;1,0;1,2][1,3] *)
EE --> Em   L   [0,0][1,1;0,1][0,2;1,0;1,2][1,3][1,4]	(* /d,little_v;-wh_rel;-f --> =>v,/d,little_v   v;-wh_rel;-f   [0,0][1,1;0,1][0,2;1,0;1,2][1,3][1,4] *)
EF --> En   H   [0,0][1,1;0,1][0,2;1,0;1,2]	(* /d,ven --> =>v,/d,ven   v   [0,0][1,1;0,1][0,2;1,0;1,2] *)
EG --> En   Z   [0,0][1,1;0,1][0,2;1,0;1,2][1,3]	(* /d,ven;-f --> =>v,/d,ven   v;-f   [0,0][1,1;0,1][0,2;1,0;1,2][1,3] *)
EH --> En   a   [0,0][1,1;0,1][0,2;1,0;1,2][1,3][1,4]	(* /d,ven;-f;-wh_rel --> =>v,/d,ven   v;-f;-wh_rel   [0,0][1,1;0,1][0,2;1,0;1,2][1,3][1,4] *)
EI --> En   K   [0,0][1,1;0,1][0,2;1,0;1,2][1,3]	(* /d,ven;-wh_rel --> =>v,/d,ven   v;-wh_rel   [0,0][1,1;0,1][0,2;1,0;1,2][1,3] *)
EJ --> En   L   [0,0][1,1;0,1][0,2;1,0;1,2][1,3][1,4]	(* /d,ven;-wh_rel;-f --> =>v,/d,ven   v;-wh_rel;-f   [0,0][1,1;0,1][0,2;1,0;1,2][1,3][1,4] *)
EK --> Eo   H   [0,0][1,1;0,1][0,2;1,0;1,2]	(* /d,ving --> =>v,/d,ving   v   [0,0][1,1;0,1][0,2;1,0;1,2] *)
EL --> Eo   Z   [0,0][1,1;0,1][0,2;1,0;1,2][1,3]	(* /d,ving;-f --> =>v,/d,ving   v;-f   [0,0][1,1;0,1][0,2;1,0;1,2][1,3] *)
EM --> Eo   a   [0,0][1,1;0,1][0,2;1,0;1,2][1,3][1,4]	(* /d,ving;-f;-wh_rel --> =>v,/d,ving   v;-f;-wh_rel   [0,0][1,1;0,1][0,2;1,0;1,2][1,3][1,4] *)
EN --> Eo   K   [0,0][1,1;0,1][0,2;1,0;1,2][1,3]	(* /d,ving;-wh_rel --> =>v,/d,ving   v;-wh_rel   [0,0][1,1;0,1][0,2;1,0;1,2][1,3] *)
EO --> Eo   L   [0,0][1,1;0,1][0,2;1,0;1,2][1,3][1,4]	(* /d,ving;-wh_rel;-f --> =>v,/d,ving   v;-wh_rel;-f   [0,0][1,1;0,1][0,2;1,0;1,2][1,3][1,4] *)
Ep --> Dx   AU   [0,0][0,1][0,2;1,0;1,1;1,2]	(* \Num,n --> /Num,\Num,n   Num   [0,0][0,1][0,2;1,0;1,1;1,2] *)
Eq --> Dx   q   [0,0][0,1][0,2;1,0;1,1;1,2][1,3]	(* \Num,n;-f --> /Num,\Num,n   Num;-f   [0,0][0,1][0,2;1,0;1,1;1,2][1,3] *)
Er --> Dx   AV   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4]	(* \Num,n;-f;-wh_rel --> /Num,\Num,n   Num;-f;-wh_rel   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4] *)
Es --> Dx   AW   [0,0][0,1][0,2;1,0;1,1;1,2][1,3]	(* \Num,n;-wh_rel --> /Num,\Num,n   Num;-wh_rel   [0,0][0,1][0,2;1,0;1,1;1,2][1,3] *)
Et --> Dx   AX   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4]	(* \Num,n;-wh_rel;-f --> /Num,\Num,n   Num;-wh_rel;-f   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4] *)
Ap --> De   [0,3;0,0][0,1][0,2]	(* \d,a --> +case,\d,a;-case   [0,3;0,0][0,1][0,2] *)
Ap --> Dp   AE   [0,0][0,1][0,2;1,0;1,1;1,2]	(* \d,a --> /A,\d,a   A   [0,0][0,1][0,2;1,0;1,1;1,2] *)
Eu --> Df   [0,3;0,0][0,1][0,2][0,4]	(* \d,a;-f --> +case,\d,a;-case;-f   [0,3;0,0][0,1][0,2][0,4] *)
Ev --> Dg   [0,3;0,0][0,1][0,2][0,4][0,5]	(* \d,a;-f;-wh_rel --> +case,\d,a;-case;-f;-wh_rel   [0,3;0,0][0,1][0,2][0,4][0,5] *)
Aq --> Dh   [0,3;0,0][0,1][0,2][0,4]	(* \d,a;-wh_rel --> +case,\d,a;-case;-wh_rel   [0,3;0,0][0,1][0,2][0,4] *)
Aq --> Dj   [0,0][0,1][0,2][0,3]	(* \d,a;-wh_rel --> +case,\d,a;-case,-wh_rel   [0,0][0,1][0,2][0,3] *)
Ew --> Di   [0,3;0,0][0,1][0,2][0,4][0,5]	(* \d,a;-wh_rel;-f --> +case,\d,a;-case;-wh_rel;-f   [0,3;0,0][0,1][0,2][0,4][0,5] *)
Ex --> EY   DB   [0,0][0,1][0,2;1,0;1,1;1,2]	(* \d,+case,v --> /p_to,\d,+case,v   p_to   [0,0][0,1][0,2;1,0;1,1;1,2] *)
Ey --> EY   DC   [0,0][0,1][0,2;1,0;1,1;1,2][1,3]	(* \d,+case,v;-f --> /p_to,\d,+case,v   p_to;-f   [0,0][0,1][0,2;1,0;1,1;1,2][1,3] *)
Ez --> EY   DD   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4]	(* \d,+case,v;-f;-wh_rel --> /p_to,\d,+case,v   p_to;-f;-wh_rel   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4] *)
FA --> EY   DE   [0,0][0,1][0,2;1,0;1,1;1,2][1,3]	(* \d,+case,v;-wh_rel --> /p_to,\d,+case,v   p_to;-wh_rel   [0,0][0,1][0,2;1,0;1,1;1,2][1,3] *)
FB --> EY   DF   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4]	(* \d,+case,v;-wh_rel;-f --> /p_to,\d,+case,v   p_to;-wh_rel;-f   [0,0][0,1][0,2;1,0;1,1;1,2][1,3][1,4] *)
As --> ""	(* @ --> "" *)
E --> "angry"	(* sigma(A) --> "angry" *)
E --> "cheap"	(* sigma(A) --> "cheap" *)
E --> "clever"	(* sigma(A) --> "clever" *)
E --> "gentle"	(* sigma(A) --> "gentle" *)
E --> "honest"	(* sigma(A) --> "honest" *)
E --> "ill"	(* sigma(A) --> "ill" *)
E --> "important"	(* sigma(A) --> "important" *)
E --> "interesting"	(* sigma(A) --> "interesting" *)
E --> "kind"	(* sigma(A) --> "kind" *)
E --> "late"	(* sigma(A) --> "late" *)
E --> "long"	(* sigma(A) --> "long" *)
E --> "lost"	(* sigma(A) --> "lost" *)
E --> "old"	(* sigma(A) --> "old" *)
E --> "poor"	(* sigma(A) --> "poor" *)
E --> "pretty"	(* sigma(A) --> "pretty" *)
E --> "proud"	(* sigma(A) --> "proud" *)
E --> "right"	(* sigma(A) --> "right" *)
E --> "sad"	(* sigma(A) --> "sad" *)
E --> "strange"	(* sigma(A) --> "strange" *)
E --> "young"	(* sigma(A) --> "young" *)
D --> "Ann"	(* sigma(d,-case) --> "Ann" *)
D --> "Chris"	(* sigma(d,-case) --> "Chris" *)
D --> "Clare"	(* sigma(d,-case) --> "Clare" *)
D --> "David"	(* sigma(d,-case) --> "David" *)
D --> "Dick"	(* sigma(d,-case) --> "Dick" *)
D --> "I"	(* sigma(d,-case) --> "I" *)
D --> "Jenny"	(* sigma(d,-case) --> "Jenny" *)
D --> "Jim"	(* sigma(d,-case) --> "Jim" *)
D --> "Joe"	(* sigma(d,-case) --> "Joe" *)
D --> "John"	(* sigma(d,-case) --> "John" *)
D --> "Mary"	(* sigma(d,-case) --> "Mary" *)
D --> "Pat"	(* sigma(d,-case) --> "Pat" *)
D --> "Patrick"	(* sigma(d,-case) --> "Patrick" *)
D --> "Paul"	(* sigma(d,-case) --> "Paul" *)
D --> "Penny"	(* sigma(d,-case) --> "Penny" *)
D --> "Sally"	(* sigma(d,-case) --> "Sally" *)
D --> "Stephen"	(* sigma(d,-case) --> "Stephen" *)
D --> "Sue"	(* sigma(d,-case) --> "Sue" *)
D --> "apples"	(* sigma(d,-case) --> "apples" *)
D --> "eggs"	(* sigma(d,-case) --> "eggs" *)
D --> "he"	(* sigma(d,-case) --> "he" *)
D --> "it"	(* sigma(d,-case) --> "it" *)
D --> "lies"	(* sigma(d,-case) --> "lies" *)
D --> "reading"	(* sigma(d,-case) --> "reading" *)
D --> "they"	(* sigma(d,-case) --> "they" *)
D --> "us"	(* sigma(d,-case) --> "us" *)
U --> "always"	(* sigma(deg) --> "always" *)
U --> "so"	(* sigma(deg) --> "so" *)
U --> "too"	(* sigma(deg) --> "too" *)
U --> "very"	(* sigma(deg) --> "very" *)
B --> "accident"	(* sigma(n) --> "accident" *)
B --> "answer"	(* sigma(n) --> "answer" *)
B --> "apple"	(* sigma(n) --> "apple" *)
B --> "bill"	(* sigma(n) --> "bill" *)
B --> "book"	(* sigma(n) --> "book" *)
B --> "box"	(* sigma(n) --> "box" *)
B --> "boy"	(* sigma(n) --> "boy" *)
B --> "brother"	(* sigma(n) --> "brother" *)
B --> "cake"	(* sigma(n) --> "cake" *)
B --> "car"	(* sigma(n) --> "car" *)
B --> "cat"	(* sigma(n) --> "cat" *)
B --> "clothe"	(* sigma(n) --> "clothe" *)
B --> "dog"	(* sigma(n) --> "dog" *)
B --> "father"	(* sigma(n) --> "father" *)
B --> "food"	(* sigma(n) --> "food" *)
B --> "friend"	(* sigma(n) --> "friend" *)
B --> "girl"	(* sigma(n) --> "girl" *)
B --> "house"	(* sigma(n) --> "house" *)
B --> "leg"	(* sigma(n) --> "leg" *)
B --> "letter"	(* sigma(n) --> "letter" *)
B --> "lie"	(* sigma(n) --> "lie" *)
B --> "man"	(* sigma(n) --> "man" *)
B --> "mother"	(* sigma(n) --> "mother" *)
B --> "picture"	(* sigma(n) --> "picture" *)
B --> "present"	(* sigma(n) --> "present" *)
B --> "sailor"	(* sigma(n) --> "sailor" *)
B --> "ship"	(* sigma(n) --> "ship" *)
B --> "story"	(* sigma(n) --> "story" *)
B --> "sweet"	(* sigma(n) --> "sweet" *)
B --> "ticket"	(* sigma(n) --> "ticket" *)
B --> "town"	(* sigma(n) --> "town" *)
B --> "treat"	(* sigma(n) --> "treat" *)
B --> "trick"	(* sigma(n) --> "trick" *)
B --> "uncle"	(* sigma(n) --> "uncle" *)
B --> "woman"	(* sigma(n) --> "woman" *)
C --> "accident"	(* sigma(n,-f) --> "accident" *)
C --> "answer"	(* sigma(n,-f) --> "answer" *)
C --> "apple"	(* sigma(n,-f) --> "apple" *)
C --> "bill"	(* sigma(n,-f) --> "bill" *)
C --> "book"	(* sigma(n,-f) --> "book" *)
C --> "box"	(* sigma(n,-f) --> "box" *)
C --> "boy"	(* sigma(n,-f) --> "boy" *)
C --> "brother"	(* sigma(n,-f) --> "brother" *)
C --> "cake"	(* sigma(n,-f) --> "cake" *)
C --> "car"	(* sigma(n,-f) --> "car" *)
C --> "cat"	(* sigma(n,-f) --> "cat" *)
C --> "clothe"	(* sigma(n,-f) --> "clothe" *)
C --> "dog"	(* sigma(n,-f) --> "dog" *)
C --> "father"	(* sigma(n,-f) --> "father" *)
C --> "food"	(* sigma(n,-f) --> "food" *)
C --> "friend"	(* sigma(n,-f) --> "friend" *)
C --> "girl"	(* sigma(n,-f) --> "girl" *)
C --> "house"	(* sigma(n,-f) --> "house" *)
C --> "leg"	(* sigma(n,-f) --> "leg" *)
C --> "letter"	(* sigma(n,-f) --> "letter" *)
C --> "lie"	(* sigma(n,-f) --> "lie" *)
C --> "man"	(* sigma(n,-f) --> "man" *)
C --> "mother"	(* sigma(n,-f) --> "mother" *)
C --> "picture"	(* sigma(n,-f) --> "picture" *)
C --> "present"	(* sigma(n,-f) --> "present" *)
C --> "sailor"	(* sigma(n,-f) --> "sailor" *)
C --> "ship"	(* sigma(n,-f) --> "ship" *)
C --> "story"	(* sigma(n,-f) --> "story" *)
C --> "sweet"	(* sigma(n,-f) --> "sweet" *)
C --> "ticket"	(* sigma(n,-f) --> "ticket" *)
C --> "town"	(* sigma(n,-f) --> "town" *)
C --> "treat"	(* sigma(n,-f) --> "treat" *)
C --> "trick"	(* sigma(n,-f) --> "trick" *)
C --> "uncle"	(* sigma(n,-f) --> "uncle" *)
C --> "woman"	(* sigma(n,-f) --> "woman" *)
AC --> "today"	(* sigma(tmp) --> "today" *)
AC --> "yesterday"	(* sigma(tmp) --> "yesterday" *)
d --> "matter"	(* sigma(v) --> "matter" *)
d --> "rule"	(* sigma(v) --> "rule" *)
d --> "wait"	(* sigma(v) --> "wait" *)
At --> "come"	(* sigma(/A,v) --> "come" *)
Au --> ""	(* sigma(/A,\d,a) --> "" *)
Av --> "will"	(* sigma(/Be,Modal) --> "will" *)
Aw --> "have"	(* sigma(/Been,Have) --> "have" *)
Ax --> "fact"	(* sigma(/Ce,n) --> "fact" *)
e --> "forget"	(* sigma(/Ce,v) --> "forget" *)
e --> "know"	(* sigma(/Ce,v) --> "know" *)
e --> "remember"	(* sigma(/Ce,v) --> "remember" *)
Ay --> "will"	(* sigma(/Have,Modal) --> "will" *)
V --> "a"	(* sigma(/Num,d,-case) --> "a" *)
V --> "my"	(* sigma(/Num,d,-case) --> "my" *)
V --> "one"	(* sigma(/Num,d,-case) --> "one" *)
V --> "the"	(* sigma(/Num,d,-case) --> "the" *)
AD --> "which"	(* sigma(/Num,+f,d,-case,-wh_rel) --> "which" *)
AD --> "who"	(* sigma(/Num,+f,d,-case,-wh_rel) --> "who" *)
Az --> "s"	(* sigma(/Num,\Num,n) --> "s" *)
BA --> "be"	(* sigma(/a,Be) --> "be" *)
BB --> "the"	(* sigma(/c_rel,d,-case) --> "the" *)
BC --> "for"	(* sigma(/d,+case,Pfor) --> "for" *)
BD --> "to"	(* sigma(/d,+case,Pto) --> "to" *)
F --> "bring"	(* sigma(/d,+case,v) --> "bring" *)
F --> "buy"	(* sigma(/d,+case,v) --> "buy" *)
F --> "get"	(* sigma(/d,+case,v) --> "get" *)
F --> "hate"	(* sigma(/d,+case,v) --> "hate" *)
F --> "have"	(* sigma(/d,+case,v) --> "have" *)
F --> "leave"	(* sigma(/d,+case,v) --> "leave" *)
F --> "like"	(* sigma(/d,+case,v) --> "like" *)
F --> "love"	(* sigma(/d,+case,v) --> "love" *)
F --> "pay"	(* sigma(/d,+case,v) --> "pay" *)
F --> "sell"	(* sigma(/d,+case,v) --> "sell" *)
F --> "send"	(* sigma(/d,+case,v) --> "send" *)
F --> "surprise"	(* sigma(/d,+case,v) --> "surprise" *)
F --> "take"	(* sigma(/d,+case,v) --> "take" *)
F --> "tell"	(* sigma(/d,+case,v) --> "tell" *)
F --> "write"	(* sigma(/d,+case,v) --> "write" *)
BE --> ""	(* sigma(/d,+case,\d,a) --> "" *)
BF --> "will"	(* sigma(/little_v,Modal) --> "will" *)
BG --> "doesnt"	(* sigma(/little_v,+case,t) --> "doesnt" *)
BH --> ""	(* sigma(/n,Num) --> "" *)
BI --> "pay"	(* sigma(/p_for,v) --> "pay" *)
G --> "explain"	(* sigma(/p_to,\d,+case,v) --> "explain" *)
G --> "give"	(* sigma(/p_to,\d,+case,v) --> "give" *)
G --> "sell"	(* sigma(/p_to,\d,+case,v) --> "sell" *)
G --> "show"	(* sigma(/p_to,\d,+case,v) --> "show" *)
G --> "teach"	(* sigma(/p_to,\d,+case,v) --> "teach" *)
G --> "tell"	(* sigma(/p_to,\d,+case,v) --> "tell" *)
BJ --> "that"	(* sigma(/t,Ce) --> "that" *)
BK --> ""	(* sigma(/t,c) --> "" *)
BL --> ""	(* sigma(/t,+wh_rel,c_rel) --> "" *)
BM --> "have"	(* sigma(/ven,Have) --> "have" *)
BN --> "be"	(* sigma(/ving,Be) --> "be" *)
BO --> "been"	(* sigma(/ving,Been) --> "been" *)
BP --> "-s"	(* sigma(n==>,Num) --> "-s" *)
f --> ""	(* sigma(=>Be,+case,t) --> "" *)
f --> "-ed"	(* sigma(=>Be,+case,t) --> "-ed" *)
f --> "-s"	(* sigma(=>Be,+case,t) --> "-s" *)
g --> ""	(* sigma(=>Have,+case,t) --> "" *)
g --> "-ed"	(* sigma(=>Have,+case,t) --> "-ed" *)
g --> "-s"	(* sigma(=>Have,+case,t) --> "-s" *)
h --> ""	(* sigma(=>Modal,+case,t) --> "" *)
h --> "-ed"	(* sigma(=>Modal,+case,t) --> "-ed" *)
h --> "-s"	(* sigma(=>Modal,+case,t) --> "-s" *)
BQ --> ""	(* sigma(=>Pfor,p_for) --> "" *)
BR --> ""	(* sigma(=>Pto,p_to) --> "" *)
i --> ""	(* sigma(=>little_v,+case,t) --> "" *)
i --> "-ed"	(* sigma(=>little_v,+case,t) --> "-ed" *)
i --> "-s"	(* sigma(=>little_v,+case,t) --> "-s" *)
BT --> ""	(* sigma(=>v,/d,little_v) --> "" *)
BU --> "-en"	(* sigma(=>v,/d,ven) --> "-en" *)
BV --> "-ing"	(* sigma(=>v,/d,ving) --> "-ing" *)
BW --> E   As   [0,0][1,0]	(* eta(A) --> sigma(A)   @   [0,0][1,0] *)
BX --> D   As   [0,0][1,0]	(* eta(d,-case) --> sigma(d,-case)   @   [0,0][1,0] *)
BY --> U   As   [0,0][1,0]	(* eta(deg) --> sigma(deg)   @   [0,0][1,0] *)
BZ --> B   As   [0,0][1,0]	(* eta(n) --> sigma(n)   @   [0,0][1,0] *)
Ba --> C   As   [0,0][1,0]	(* eta(n,-f) --> sigma(n,-f)   @   [0,0][1,0] *)
Bb --> AC   As   [0,0][1,0]	(* eta(tmp) --> sigma(tmp)   @   [0,0][1,0] *)
Bc --> d   As   [0,0][1,0]	(* eta(v) --> sigma(v)   @   [0,0][1,0] *)
Bd --> At   As   [0,0][1,0]	(* eta(/A,v) --> sigma(/A,v)   @   [0,0][1,0] *)
Be --> Au   As   [0,0][1,0]	(* eta(/A,\d,a) --> sigma(/A,\d,a)   @   [0,0][1,0] *)
Bf --> Av   As   [0,0][1,0]	(* eta(/Be,Modal) --> sigma(/Be,Modal)   @   [0,0][1,0] *)
Bg --> Aw   As   [0,0][1,0]	(* eta(/Been,Have) --> sigma(/Been,Have)   @   [0,0][1,0] *)
Bh --> Ax   As   [0,0][1,0]	(* eta(/Ce,n) --> sigma(/Ce,n)   @   [0,0][1,0] *)
Bi --> e   As   [0,0][1,0]	(* eta(/Ce,v) --> sigma(/Ce,v)   @   [0,0][1,0] *)
Bj --> Ay   As   [0,0][1,0]	(* eta(/Have,Modal) --> sigma(/Have,Modal)   @   [0,0][1,0] *)
Bk --> V   As   [0,0][1,0]	(* eta(/Num,d,-case) --> sigma(/Num,d,-case)   @   [0,0][1,0] *)
Bl --> AD   As   [0,0][1,0]	(* eta(/Num,+f,d,-case,-wh_rel) --> sigma(/Num,+f,d,-case,-wh_rel)   @   [0,0][1,0] *)
Bm --> Az   As   [0,0][1,0]	(* eta(/Num,\Num,n) --> sigma(/Num,\Num,n)   @   [0,0][1,0] *)
Bn --> BA   As   [0,0][1,0]	(* eta(/a,Be) --> sigma(/a,Be)   @   [0,0][1,0] *)
Bo --> BB   As   [0,0][1,0]	(* eta(/c_rel,d,-case) --> sigma(/c_rel,d,-case)   @   [0,0][1,0] *)
Bp --> BC   As   [0,0][1,0]	(* eta(/d,+case,Pfor) --> sigma(/d,+case,Pfor)   @   [0,0][1,0] *)
Bq --> BD   As   [0,0][1,0]	(* eta(/d,+case,Pto) --> sigma(/d,+case,Pto)   @   [0,0][1,0] *)
Br --> F   As   [0,0][1,0]	(* eta(/d,+case,v) --> sigma(/d,+case,v)   @   [0,0][1,0] *)
Bs --> BE   As   [0,0][1,0]	(* eta(/d,+case,\d,a) --> sigma(/d,+case,\d,a)   @   [0,0][1,0] *)
Bt --> BF   As   [0,0][1,0]	(* eta(/little_v,Modal) --> sigma(/little_v,Modal)   @   [0,0][1,0] *)
Bu --> BG   As   [0,0][1,0]	(* eta(/little_v,+case,t) --> sigma(/little_v,+case,t)   @   [0,0][1,0] *)
Bv --> BH   As   [0,0][1,0]	(* eta(/n,Num) --> sigma(/n,Num)   @   [0,0][1,0] *)
Bw --> BI   As   [0,0][1,0]	(* eta(/p_for,v) --> sigma(/p_for,v)   @   [0,0][1,0] *)
Bx --> G   As   [0,0][1,0]	(* eta(/p_to,\d,+case,v) --> sigma(/p_to,\d,+case,v)   @   [0,0][1,0] *)
By --> BJ   As   [0,0][1,0]	(* eta(/t,Ce) --> sigma(/t,Ce)   @   [0,0][1,0] *)
Bz --> BK   As   [0,0][1,0]	(* eta(/t,c) --> sigma(/t,c)   @   [0,0][1,0] *)
CA --> BL   As   [0,0][1,0]	(* eta(/t,+wh_rel,c_rel) --> sigma(/t,+wh_rel,c_rel)   @   [0,0][1,0] *)
CB --> BM   As   [0,0][1,0]	(* eta(/ven,Have) --> sigma(/ven,Have)   @   [0,0][1,0] *)
CC --> BN   As   [0,0][1,0]	(* eta(/ving,Be) --> sigma(/ving,Be)   @   [0,0][1,0] *)
CD --> BO   As   [0,0][1,0]	(* eta(/ving,Been) --> sigma(/ving,Been)   @   [0,0][1,0] *)
CE --> BP   As   [0,0][1,0]	(* eta(n==>,Num) --> sigma(n==>,Num)   @   [0,0][1,0] *)
CF --> f   As   [0,0][1,0]	(* eta(=>Be,+case,t) --> sigma(=>Be,+case,t)   @   [0,0][1,0] *)
CG --> g   As   [0,0][1,0]	(* eta(=>Have,+case,t) --> sigma(=>Have,+case,t)   @   [0,0][1,0] *)
CH --> h   As   [0,0][1,0]	(* eta(=>Modal,+case,t) --> sigma(=>Modal,+case,t)   @   [0,0][1,0] *)
CI --> BQ   As   [0,0][1,0]	(* eta(=>Pfor,p_for) --> sigma(=>Pfor,p_for)   @   [0,0][1,0] *)
CJ --> BR   As   [0,0][1,0]	(* eta(=>Pto,p_to) --> sigma(=>Pto,p_to)   @   [0,0][1,0] *)
CK --> i   As   [0,0][1,0]	(* eta(=>little_v,+case,t) --> sigma(=>little_v,+case,t)   @   [0,0][1,0] *)
CL --> BT   As   [0,0][1,0]	(* eta(=>v,/d,little_v) --> sigma(=>v,/d,little_v)   @   [0,0][1,0] *)
CM --> BU   As   [0,0][1,0]	(* eta(=>v,/d,ven) --> sigma(=>v,/d,ven)   @   [0,0][1,0] *)
CN --> BV   As   [0,0][1,0]	(* eta(=>v,/d,ving) --> sigma(=>v,/d,ving)   @   [0,0][1,0] *)
AE --> As   BW   [0,0][1,0][1,1]	(* A --> @   eta(A)   [0,0][1,0][1,1] *)
t --> As   BX   [0,0][1,0][1,1]	(* d,-case --> @   eta(d,-case)   [0,0][1,0][1,1] *)
Cs --> As   BY   [0,0][1,0][1,1]	(* deg --> @   eta(deg)   [0,0][1,0][1,1] *)
W --> As   BZ   [0,0][1,0][1,1]	(* n --> @   eta(n)   [0,0][1,0][1,1] *)
Ag --> As   Ba   [0,0][1,0][1,1]	(* n,-f --> @   eta(n,-f)   [0,0][1,0][1,1] *)
DJ --> As   Bb   [0,0][1,0][1,1]	(* tmp --> @   eta(tmp)   [0,0][1,0][1,1] *)
H --> As   Bc   [0,0][1,0][1,1]	(* v --> @   eta(v)   [0,0][1,0][1,1] *)
Do --> As   Bd   [0,0][1,0][1,1]	(* /A,v --> @   eta(/A,v)   [0,0][1,0][1,1] *)
Dp --> As   Be   [0,0][1,0][1,1]	(* /A,\d,a --> @   eta(/A,\d,a)   [0,0][1,0][1,1] *)
Dq --> As   Bf   [0,0][1,0][1,1]	(* /Be,Modal --> @   eta(/Be,Modal)   [0,0][1,0][1,1] *)
Dr --> As   Bg   [0,0][1,0][1,1]	(* /Been,Have --> @   eta(/Been,Have)   [0,0][1,0][1,1] *)
Ds --> As   Bh   [0,0][1,0][1,1]	(* /Ce,n --> @   eta(/Ce,n)   [0,0][1,0][1,1] *)
Dt --> As   Bi   [0,0][1,0][1,1]	(* /Ce,v --> @   eta(/Ce,v)   [0,0][1,0][1,1] *)
Du --> As   Bj   [0,0][1,0][1,1]	(* /Have,Modal --> @   eta(/Have,Modal)   [0,0][1,0][1,1] *)
Dv --> As   Bk   [0,0][1,0][1,1]	(* /Num,d,-case --> @   eta(/Num,d,-case)   [0,0][1,0][1,1] *)
Dw --> As   Bl   [0,0][1,0][1,1]	(* /Num,+f,d,-case,-wh_rel --> @   eta(/Num,+f,d,-case,-wh_rel)   [0,0][1,0][1,1] *)
Dx --> As   Bm   [0,0][1,0][1,1]	(* /Num,\Num,n --> @   eta(/Num,\Num,n)   [0,0][1,0][1,1] *)
Dy --> As   Bn   [0,0][1,0][1,1]	(* /a,Be --> @   eta(/a,Be)   [0,0][1,0][1,1] *)
Dz --> As   Bo   [0,0][1,0][1,1]	(* /c_rel,d,-case --> @   eta(/c_rel,d,-case)   [0,0][1,0][1,1] *)
EP --> As   Bp   [0,0][1,0][1,1]	(* /d,+case,Pfor --> @   eta(/d,+case,Pfor)   [0,0][1,0][1,1] *)
EQ --> As   Bq   [0,0][1,0][1,1]	(* /d,+case,Pto --> @   eta(/d,+case,Pto)   [0,0][1,0][1,1] *)
ER --> As   Br   [0,0][1,0][1,1]	(* /d,+case,v --> @   eta(/d,+case,v)   [0,0][1,0][1,1] *)
ET --> As   Bs   [0,0][1,0][1,1]	(* /d,+case,\d,a --> @   eta(/d,+case,\d,a)   [0,0][1,0][1,1] *)
EU --> As   Bt   [0,0][1,0][1,1]	(* /little_v,Modal --> @   eta(/little_v,Modal)   [0,0][1,0][1,1] *)
EV --> As   Bu   [0,0][1,0][1,1]	(* /little_v,+case,t --> @   eta(/little_v,+case,t)   [0,0][1,0][1,1] *)
EW --> As   Bv   [0,0][1,0][1,1]	(* /n,Num --> @   eta(/n,Num)   [0,0][1,0][1,1] *)
EX --> As   Bw   [0,0][1,0][1,1]	(* /p_for,v --> @   eta(/p_for,v)   [0,0][1,0][1,1] *)
EY --> As   Bx   [0,0][1,0][1,1]	(* /p_to,\d,+case,v --> @   eta(/p_to,\d,+case,v)   [0,0][1,0][1,1] *)
EZ --> As   By   [0,0][1,0][1,1]	(* /t,Ce --> @   eta(/t,Ce)   [0,0][1,0][1,1] *)
Ea --> As   Bz   [0,0][1,0][1,1]	(* /t,c --> @   eta(/t,c)   [0,0][1,0][1,1] *)
Eb --> As   CA   [0,0][1,0][1,1]	(* /t,+wh_rel,c_rel --> @   eta(/t,+wh_rel,c_rel)   [0,0][1,0][1,1] *)
Ec --> As   CB   [0,0][1,0][1,1]	(* /ven,Have --> @   eta(/ven,Have)   [0,0][1,0][1,1] *)
Ed --> As   CC   [0,0][1,0][1,1]	(* /ving,Be --> @   eta(/ving,Be)   [0,0][1,0][1,1] *)
Ee --> As   CD   [0,0][1,0][1,1]	(* /ving,Been --> @   eta(/ving,Been)   [0,0][1,0][1,1] *)
Ef --> As   CE   [0,0][1,0][1,1]	(* n==>,Num --> @   eta(n==>,Num)   [0,0][1,0][1,1] *)
Eg --> As   CF   [0,0][1,0][1,1]	(* =>Be,+case,t --> @   eta(=>Be,+case,t)   [0,0][1,0][1,1] *)
Eh --> As   CG   [0,0][1,0][1,1]	(* =>Have,+case,t --> @   eta(=>Have,+case,t)   [0,0][1,0][1,1] *)
Ei --> As   CH   [0,0][1,0][1,1]	(* =>Modal,+case,t --> @   eta(=>Modal,+case,t)   [0,0][1,0][1,1] *)
Ej --> As   CI   [0,0][1,0][1,1]	(* =>Pfor,p_for --> @   eta(=>Pfor,p_for)   [0,0][1,0][1,1] *)
Ek --> As   CJ   [0,0][1,0][1,1]	(* =>Pto,p_to --> @   eta(=>Pto,p_to)   [0,0][1,0][1,1] *)
El --> As   CK   [0,0][1,0][1,1]	(* =>little_v,+case,t --> @   eta(=>little_v,+case,t)   [0,0][1,0][1,1] *)
Em --> As   CL   [0,0][1,0][1,1]	(* =>v,/d,little_v --> @   eta(=>v,/d,little_v)   [0,0][1,0][1,1] *)
En --> As   CM   [0,0][1,0][1,1]	(* =>v,/d,ven --> @   eta(=>v,/d,ven)   [0,0][1,0][1,1] *)
Eo --> As   CN   [0,0][1,0][1,1]	(* =>v,/d,ving --> @   eta(=>v,/d,ving)   [0,0][1,0][1,1] *)
